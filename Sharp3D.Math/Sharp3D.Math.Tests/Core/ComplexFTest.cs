using Microsoft.VisualStudio.TestTools.UnitTesting;
using Sharp3D.Math.Core;

// The following code was generated by Microsoft Test Code
//  Generation V1.0. The test owner should check each test
//  for validity.

namespace Sharp3D.Math.Core.Tests
{
	/// <summary>
	/// This is a test class for ComplexF and is intended
	/// to contain all ComplexF Unit Tests
	/// </summary>
	[TestClass()]
	public class ComplexFTest
	{
		#region Initialize\Cleanup
		/// <summary>
		/// Initialize() is called once during test execution before
		/// test methods in this test class are executed.
		/// </summary>
		[TestInitialize()]
		public void Initialize()
		{
			//  TODO: Add test initialization code
		}

		/// <summary>
		/// Cleanup() is called once during test execution after
		/// test methods in this class have executed unless
		/// this test class' Initialize() method throws an exception.
		/// </summary>
		[TestCleanup()]
		public void Cleanup()
		{
			//  TODO: Add test cleanup code
		}
		#endregion

		#region TestContext
		private TestContext m_testContext = null;
		public TestContext TestContext
		{
			get { return m_testContext; }
			set { m_testContext = value; }
		}
		#endregion

		#region Constructors Tests
		/// <summary>
		/// ConstructorTest is a test case for ComplexF (float, float)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			float real = 1.0f;
			float imaginary = 2.0f;

			Sharp3D.Math.Core.ComplexF target = new Sharp3D.Math.Core.ComplexF(real, imaginary);

			Assert.AreEqual(real, target.Real);
			Assert.AreEqual(imaginary, target.Imaginary);
		}

		/// <summary>
		/// ConstructorTest1 is a test case for ComplexF (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			Sharp3D.Math.Core.ComplexF c = new Sharp3D.Math.Core.ComplexF(1, 2);
			Sharp3D.Math.Core.ComplexF target = new Sharp3D.Math.Core.ComplexF(c);

			Assert.AreEqual(c.Real, target.Real);
			Assert.AreEqual(c.Imaginary, target.Imaginary);
		}
		#endregion

		#region Public Properties Tests
		[TestMethod()]
		public void RealTest()
		{
			Sharp3D.Math.Core.ComplexF target = Sharp3D.Math.Core.ComplexF.Zero;

			float val = 3.14f;
			target.Real = val;

			Assert.AreEqual(val, target.Real);
		}
		[TestMethod()]
		public void ImaginaryTest()
		{
			Sharp3D.Math.Core.ComplexF target = Sharp3D.Math.Core.ComplexF.Zero;

			float val = 3.14f;
			target.Imaginary = val;

			Assert.AreEqual(val, target.Imaginary);
		}
		[TestMethod()]
		public void IsRealTest()
		{
			Sharp3D.Math.Core.ComplexF target = new ComplexF(1, 2);

			Assert.AreEqual(false, target.IsReal);

			target.Imaginary = 0;

			Assert.AreEqual(true, target.IsReal);
		}
		[TestMethod()]
		public void IsImaginaryTest()
		{
			Sharp3D.Math.Core.ComplexF target = new ComplexF(1, 2);

			Assert.AreEqual(false, target.IsImaginary);

			target.Real = 0;

			Assert.AreEqual(true, target.IsImaginary);
		}
		[TestMethod()]
		public void ModulusTest()
		{
			Sharp3D.Math.Core.ComplexF target = new ComplexF(2, 4);

			float expected = (float)System.Math.Sqrt(20);

			Assert.AreEqual(expected, target.Modulus);
		}
		[TestMethod()]
		public void ModulusSquaredTest()
		{
			Sharp3D.Math.Core.ComplexF target = new ComplexF(2, 4);

			float expected = 20;

			Assert.AreEqual(expected, target.ModulusSquared);
		}
		[TestMethod()]
		public void ArgumentTest()
		{
			// Test get
			Sharp3D.Math.Core.ComplexF target = new ComplexF(2, 4);
			float expected = (float)System.Math.Atan(2);
			Assert.AreEqual(expected, target.Argument, "Failed get");

			// Test set
			target.Argument = (float)System.Math.PI / 2;
			Assert.AreEqual(System.Math.PI / 2, target.Argument, "Failed set");
		}
		[TestMethod()]
		public void ConjugateTest()
		{
		}
		#endregion

		#region Public Static Parse Methods Tests
		/// <summary>
		/// ParseTest is a test case for Parse (string)
		/// </summary>
		[TestMethod()]
		public void ParseTest()
		{
			string value = "(2,   4)";

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF actual;

			actual = Sharp3D.Math.Core.ComplexF.Parse(value);
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// TryParseTest is a test case for TryParse (string, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void TryParseTest()
		{
			string value = "(2, 4)";
			string wrongValue = "abc";
			Sharp3D.Math.Core.ComplexF result = ComplexF.Zero;
			Sharp3D.Math.Core.ComplexF expectedResult = new Sharp3D.Math.Core.ComplexF(2, 4);

			bool actual;

			actual = Sharp3D.Math.Core.ComplexF.TryParse(value, out result);
			Assert.AreEqual(true, actual);
			Assert.AreEqual(expectedResult, result);

			actual = Sharp3D.Math.Core.ComplexF.TryParse(wrongValue, out result);
			Assert.AreEqual(false, actual);
		}
		#endregion

		#region Public Static Complex Arithmetics Tests
		/// <summary>
		/// AddComplexScalarResultTest is a test case for Add (Sharp3D.Math.Core.ComplexF, float, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AddComplexScalarResultTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			float scalar = 2;
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(4, 4);

			Sharp3D.Math.Core.ComplexF.Add(complex, scalar, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// AddComplexComplexResultTest is a test case for Add (Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AddComplexComplexResultTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(1, 2);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(3, 4);
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(4, 6);

			Sharp3D.Math.Core.ComplexF.Add(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// SubtractScalarComplexResultTest is a test case for Subtract (float, Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SubtractScalarComplexResultTest()
		{
			float scalar = 10;
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(8, 4);

			Sharp3D.Math.Core.ComplexF.Subtract(scalar, complex, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// SubtractComplexScalarResultTest is a test case for Subtract (Sharp3D.Math.Core.ComplexF, float, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SubtractComplexScalarResultTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(10, 4);
			float scalar = 2;
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(8, 4);

			Sharp3D.Math.Core.ComplexF.Subtract(complex, scalar, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// SubtractComplexComplexResultTest is a test case for Subtract (Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SubtractComplexComplexResultTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(3, 4);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(1, 2);
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2, 2);

			Sharp3D.Math.Core.ComplexF.Subtract(left, right, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// MultiplyComplexScalarResultTest is a test case for Multiply (Sharp3D.Math.Core.ComplexF, float, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void MultiplyComplexScalarResultTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			float scalar = 2;
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(4, 8);

			Sharp3D.Math.Core.ComplexF.Multiply(complex, scalar, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// MultiplyComplexComplexResultTest is a test case for Multiply (Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void MultiplyComplexComplexResultTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(2, 3);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(4, 5);
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(-7, 22);

			Sharp3D.Math.Core.ComplexF.Multiply(left, right, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// DivideScalarComplexResultTest is a test case for Divide (float, Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void DivideScalarComplexResultTest()
		{
			float scalar = 4;
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2, 1);

			Sharp3D.Math.Core.ComplexF.Divide(scalar, complex, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// DivideComplexScalarResultTest is a test case for Divide (Sharp3D.Math.Core.ComplexF, float, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void DivideComplexScalarResultTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			float scalar = 2;
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(1, 2);

			Sharp3D.Math.Core.ComplexF.Divide(complex, scalar, ref result);

			Assert.AreEqual(expected, result);
		}

		/// <summary>
		/// DivideComplexComplexResultTest is a test case for Divide (Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void DivideComplexComplexResultTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(4, 8);
			Sharp3D.Math.Core.ComplexF result = new Sharp3D.Math.Core.ComplexF();
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(0.5f, 0.0f);

			Sharp3D.Math.Core.ComplexF.Divide(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// ApproxEqualTest is a test case for ApproxEqual (Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void ApproxEqualTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(2 + MathFunctions.EpsilonF, 4 + MathFunctions.EpsilonF);

			bool actual;

			actual = Sharp3D.Math.Core.ComplexF.ApproxEqual(left, right);
			Assert.AreEqual(true, actual);

			left.Real -= MathFunctions.EpsilonF;
			actual = Sharp3D.Math.Core.ComplexF.ApproxEqual(left, right);
			Assert.AreEqual(false, actual);
		}
		/// <summary>
		/// ApproxEqualTest1 is a test case for ApproxEqual (Sharp3D.Math.Core.ComplexF, Sharp3D.Math.Core.ComplexF, float)
		/// </summary>
		[TestMethod()]
		public void ApproxEqualTest1()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(2.09f, 4.09f);
			float tolerance = 0.1f;
			bool actual;

			actual = Sharp3D.Math.Core.ComplexF.ApproxEqual(left, right, tolerance);
			Assert.AreEqual(true, actual);

			right.Imaginary = 4.11f;
			actual = Sharp3D.Math.Core.ComplexF.ApproxEqual(left, right, tolerance);
			Assert.AreEqual(false, actual);
		}
		#endregion

		#region Special Functions Tests
		/// <summary>
		/// SqrtTest is a test case for Sqrt (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SqrtTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(1.798907439947867f, 1.111785940502842f);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Sqrt(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be qual to " + expected.ToString());
		}
		/// <summary>
		/// ExpTest is a test case for Exp (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void ExpTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(-4.829809383269385f, -5.592056093640982f);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Exp(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be qual to " + expected.ToString());
		}
		/// <summary>
		/// LogTest is a test case for Log (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void LogTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(1.497866136776995f, 1.107148717794091f);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Log(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be qual to " + expected.ToString());
		}
		#endregion

		#region Trigonometric Functions Tests
		/// <summary>
		/// SinTest is a test case for Sin (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SinTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(24.83130584894638f, -11.35661271121817f);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Sin(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected, (float)1E-14), actual.ToString() + " Should be qual to " + expected.ToString());
		}
		/// <summary>
		/// CosTest is a test case for Cos (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void CosTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(-11.36423470640106f, -24.81465148563418f);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Cos(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected, (float)1E-14), actual.ToString() + " Should be qual to " + expected.ToString());
		}
		/// <summary>
		/// TanTest is a test case for Tan (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void TanTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-0.0005079806234700, (float)1.0004385132020523);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Tan(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected, (float)1E-14), actual.ToString() + " Should be qual to " + expected.ToString());
		}
		/// <summary>
		/// CotTest is a test case for Cot (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void CotTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-0.0005075352730720, (float)-0.9995614213024123);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Cot(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected, (float)1E-14), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// SecTest is a test case for Sec (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SecTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-0.01525579280514559, (float)0.03331215795670784);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Sec(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected, (float)1E-14), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// CscTest is a test case for Csc (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void CscTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.03330529080682464f, (float)0.01523219484422127f);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Csc(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected, (float)1E-14), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		#endregion

		#region Trigonometric Arcus Functions Tests
		/// <summary>
		/// AsinTest is a test case for Asin (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AsinTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.453870209963123, (float)2.198573027920936);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Asin(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AcosTest is a test case for Acos (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AcosTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)1.116926116831774, (float)-2.198573027920936);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Acos(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AtanTest is a test case for Atan (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AtanTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)1.467048213577295, (float)0.200586618131234);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Atan(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AcotTest is a test case for Acot (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AcotTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.1037481132176013, (float)-0.2005866181312343);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Acot(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AsecTest is a test case for Asec (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AsecTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)1.472598815661398, (float)0.199639385389533);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Asec(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AcscTest is a test case for Acsc (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AcscTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.0981975111334984, (float)-0.1996393853895331);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Acsc(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		#endregion

		#region Trigonometric Hyperbolic Functions Tests
		/// <summary>
		/// SinhTest is a test case for Sinh (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SinhTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-2.370674169352002, (float)-2.847239086848828);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Sinh(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));
		}
		/// <summary>
		/// CoshTest is a test case for Cosh (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void CoshTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-2.459135213917384, (float)-2.744817006792154);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Cosh(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));
		}
		/// <summary>
		/// TanhTest is a test case for Tanh (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void TanhTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)1.0046823121902352, (float)0.0364233692474037);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Tanh(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));
		}
		/// <summary>
		/// CothTest is a test case for Coth (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void CothTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.9940330273673858, (float)-0.0360372941382701);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Coth(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));

			complex = new Sharp3D.Math.Core.ComplexF(2, 8);
			expected = new Sharp3D.Math.Core.ComplexF((float)0.9654716324434616, (float)0.0101855378716855);
			actual = Sharp3D.Math.Core.ComplexF.Coth(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));
		}
		/// <summary>
		/// SechTest is a test case for Sech (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void SechTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-0.1810668485990848, (float)0.2021016829771301);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Sech(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));
		}
		/// <summary>
		/// CschTest is a test case for Csch (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void CschTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)-0.1727032298735341, (float)0.2074209070474551);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Csch(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected));
		}
		#endregion

		#region Trigonometric Hyperbolic Area Functions Tests
		/// <summary>
		/// AsinhTest is a test case for Asinh (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AsinhTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)2.799645777565428, (float)1.324070556489239);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Asinh(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AcoshTest is a test case for Acosh (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AcoshTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)2.806133700190723, (float)1.327531093722728);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Acosh(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AtanhTest is a test case for Atanh (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AtanhTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.029018042813189, (float)1.453588488932991);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Atanh(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		/// <summary>
		/// AcothTest is a test case for Acoth (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AcothTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.02901804281318850, (float)-0.11720783786190539);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Acoth(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());

		}
		/// <summary>
		/// AsechTest is a test case for Asech (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AsechTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.117427224649058, (float)-1.541582029735517);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Asech(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());

		}
		/// <summary>
		/// AcschTest is a test case for Acsch (Sharp3D.Math.Core.ComplexF)
		/// </summary>
		[TestMethod()]
		public void AcschTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF((float)0.02961293348688566, (float)-0.11786822655488054);
			Sharp3D.Math.Core.ComplexF actual = Sharp3D.Math.Core.ComplexF.Acsch(complex);

			Assert.IsTrue(ComplexF.ApproxEqual(actual, expected), actual.ToString() + " Should be equal to " + expected.ToString());
		}
		#endregion

		#region Public Methods Tests
		/// <summary>
		/// NormalizeTest is a test case for Normalize ()
		/// </summary>
		[TestMethod()]
		public void NormalizeTest()
		{
			Sharp3D.Math.Core.ComplexF target = new Sharp3D.Math.Core.ComplexF(1, 2);
			target.Normalize();

			bool expected = true;
			bool actual = MathFunctions.ApproxEquals(1.0, target.Modulus);

			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region System.Object Overrides Tests
		/// <summary>
		/// EqualsTest is a test case for Equals (object)
		/// </summary>
		[TestMethod()]
		public void EqualsTest()
		{
			Sharp3D.Math.Core.ComplexF c = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF target = new Sharp3D.Math.Core.ComplexF(c);

			bool expected = true;
			bool actual;
			actual = target.Equals(c);
			Assert.AreEqual(expected, actual, c.ToString() + " should be qual to " + target.ToString());

			c.Real = 3;
			expected = false;
			actual = target.Equals(c);
			Assert.AreEqual(expected, actual, c.ToString() + " should not be qual to " + target.ToString());
		}
		/// <summary>
		/// ToStringTest is a test case for ToString ()
		/// </summary>
		[TestMethod()]
		public void ToStringTest()
		{
			Sharp3D.Math.Core.ComplexF target = new Sharp3D.Math.Core.ComplexF(1, 2);

			string expected = "(1, 2)";
			string actual;

			actual = target.ToString();
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Comparison Operators Tests
		/// <summary>
		/// ValueEqualityTest is a test case for operator ==
		/// </summary>
		[TestMethod()]
		public void ValueEqualityTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(1, 2);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(3, 4);

			bool expected = false;
			bool actual;

			actual = left == right;
			Assert.AreEqual(expected, actual);

			right = left;
			expected = true;
			actual = left == right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// NotEqualTest is a test case for operator !=
		/// </summary>
		[TestMethod()]
		public void NotEqualTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(1, 2);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(3, 4);

			bool actual;

			actual = left != right;
			Assert.AreEqual(true, actual);

			right = left;
			actual = left != right;
			Assert.AreEqual(false, actual);
		}
		#endregion

		#region Unary Operators Tests
		/// <summary>
		/// NegativeTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void NegativeTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(-2, -4);
			Sharp3D.Math.Core.ComplexF actual;

			actual = -complex;
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Binary Operators Tests
		/// <summary>
		/// AddOpComplexScalarTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddOpComplexScalarTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(1,2);
			float scalar = 1;

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2,2);
			Sharp3D.Math.Core.ComplexF actual;

			actual = complex + scalar;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddOpScalarComplexTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddOpScalarComplexTest()
		{
			float scalar = 1;
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(1,2);

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2,2);
			Sharp3D.Math.Core.ComplexF actual;

			actual = scalar + complex;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddOpComplexComplexTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddOpComplexComplexTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(1,2);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(3,4);

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(4,6);
			Sharp3D.Math.Core.ComplexF actual;

			actual = left + right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// SubtractOpComplexScalarTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractOpComplexScalarTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2,4);
			float scalar = 1;

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(1,4);
			Sharp3D.Math.Core.ComplexF actual;

			actual = complex - scalar;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// SubtractOpComplexComplexTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractOpComplexComplexTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(3,4);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(1,2);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2,2);
			Sharp3D.Math.Core.ComplexF actual;

			actual = left - right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// SubtractOpScalarComplexTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractOpScalarComplexTest()
		{
			float scalar = 10;
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(8, 4);
			Sharp3D.Math.Core.ComplexF actual;

			actual = scalar - complex;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// MultiplyOpComplexScalarTest is a test case for operator *
		/// </summary>
		[TestMethod()]
		public void MultiplyOpComplexScalarTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			float scalar = 2;

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(4, 8);
			Sharp3D.Math.Core.ComplexF actual;

			actual = complex * scalar;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// MultiplyOpComplexComplexTest is a test case for operator *
		/// </summary>
		[TestMethod()]
		public void MultiplyOpComplexComplexTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(2, 3);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(4, 5);
			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(-7, 22);
			Sharp3D.Math.Core.ComplexF actual;

			actual = left * right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// MultiplyOpScalarComplexTest is a test case for operator *
		/// </summary>
		[TestMethod()]
		public void MultiplyOpScalarComplexTest()
		{
			float scalar = 2;
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(4, 8);
			Sharp3D.Math.Core.ComplexF actual;

			actual = scalar * complex;
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// DivideOpComplexScalarTest is a test case for operator /
		/// </summary>
		[TestMethod()]
		public void DivideOpComplexScalarTest()
		{
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);
			float scalar = 2;

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(1, 2);
			Sharp3D.Math.Core.ComplexF actual;

			actual = complex / scalar;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// DivideOpScalarComplexTest is a test case for operator /
		/// </summary>
		[TestMethod()]
		public void DivideOpScalarComplexTest()
		{
			float scalar = 4;
			Sharp3D.Math.Core.ComplexF complex = new Sharp3D.Math.Core.ComplexF(2, 4);

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(2, 1);
			Sharp3D.Math.Core.ComplexF actual;

			actual = scalar / complex;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// DivideOpComplexComplexTest is a test case for operator /
		/// </summary>
		[TestMethod()]
		public void DivideOpComplexComplexTest()
		{
			Sharp3D.Math.Core.ComplexF left = new Sharp3D.Math.Core.ComplexF(2, 4);
			Sharp3D.Math.Core.ComplexF right = new Sharp3D.Math.Core.ComplexF(4, 8);

			Sharp3D.Math.Core.ComplexF expected = new Sharp3D.Math.Core.ComplexF(0.5f, 0.0f);
			Sharp3D.Math.Core.ComplexF actual;

			actual = left / right;
			Assert.AreEqual(expected, actual);
		}
		#endregion
	}
}
