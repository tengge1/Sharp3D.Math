using Microsoft.VisualStudio.TestTools.UnitTesting;

// The following code was generated by Microsoft Test Code
//  Generation V1.0. The test owner should check each test
//  for validity.

namespace Sharp3D.Math.Core.Tests
{
	/// <summary>
	/// This is a test class for Interval and is intended
	/// to contain all Interval Unit Tests
	/// </summary>
	[TestClass()]
	public class IntervalTest
	{
		/// <summary>
		/// Initialize() is called once during test execution before
		/// test methods in this test class are executed.
		/// </summary>
		[TestInitialize()]
		public void Initialize()
		{
			//  TODO: Add test initialization code
		}

		/// <summary>
		/// Cleanup() is called once during test execution after
		/// test methods in this class have executed unless
		/// this test class' Initialize() method throws an exception.
		/// </summary>
		[TestCleanup()]
		public void Cleanup()
		{
			//  TODO: Add test cleanup code
		}

		private TestContext m_testContext = null;
		public TestContext TestContext
		{
			get { return m_testContext; }
			set { m_testContext = value; }
		}

		/// <summary>
		/// EqualsTest is a test case for Equals (object)
		/// </summary>
		[TestMethod()]
		public void EqualsTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			object obj = new Sharp3D.Math.Core.Interval();

			bool expected = true;
			bool actual;

			actual = target.Equals(obj);
			Assert.AreEqual(expected, actual);

			((Sharp3D.Math.Core.Interval)obj).IntervalType = Sharp3D.Math.Core.Interval.Type.Closed;
			expected = false;
			actual = target.Equals(obj);
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// ConstructorTest is a test case for Interval ()
		/// </summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			Assert.AreEqual(0.0, target.Min);
			Assert.AreEqual(1.0, target.Max);
			Assert.AreEqual(Sharp3D.Math.Core.Interval.Type.Open, target.IntervalType);
		}

		/// <summary>
		/// ConstructorTest1 is a test case for Interval (Sharp3D.Math.Core.Interval)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			Sharp3D.Math.Core.Interval interval = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.ClosedOpen, 2.5, 3.4);
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval(interval);

			Assert.AreEqual(2.5, target.Min);
			Assert.AreEqual(3.4, target.Max);
			Assert.AreEqual(Sharp3D.Math.Core.Interval.Type.ClosedOpen, target.IntervalType);
		}

		/// <summary>
		/// ConstructorTest2 is a test case for Interval (Sharp3D.Math.Core.Interval.Type, double, double)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest2()
		{
			Sharp3D.Math.Core.Interval.Type type = Sharp3D.Math.Core.Interval.Type.Open;
			double minValue = 2.5;
			double maxValue = 4.0;

			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval(type, minValue, maxValue);

			Assert.AreEqual(minValue, target.Min);
			Assert.AreEqual(maxValue, target.Max);
			Assert.AreEqual(type, target.IntervalType);
		}

		/// <summary>
		/// IntervalTypeTest is a test case for IntervalType
		/// </summary>
		[TestMethod()]
		public void IntervalTypeTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			Sharp3D.Math.Core.Interval.Type val = Sharp3D.Math.Core.Interval.Type.Closed;
			target.IntervalType = val;

			Assert.AreEqual(val, target.IntervalType);
		}

		/// <summary>
		/// IsInsideTest is a test case for IsInside (double)
		/// </summary>
		[TestMethod()]
		public void IsInsideTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			bool expected;
			bool actual;

			/*** Open interval ***/
			target.IntervalType = Sharp3D.Math.Core.Interval.Type.ClosedOpen;
			expected = true;
			actual = target.IsInside(0.5);
			Assert.AreEqual(expected, actual, "0.5 should be inside " + target.ToString());

			expected = false;
			actual = target.IsInside(0.0) && target.IsInside(1.0);
			Assert.AreEqual(expected, actual, "0.0 and 1.0 should be outside " + target.ToString());

			/*** ClosedOpen interval  ***/
			target.IntervalType = Sharp3D.Math.Core.Interval.Type.ClosedOpen;
			expected = true;
			actual = target.IsInside(0.0) && target.IsInside(0.5);
			Assert.AreEqual(expected, actual, "0.0 and 0.5 should be inside " + target.ToString());

			expected = false;
			actual = target.IsInside(1.0);
			Assert.AreEqual(expected, actual, "1.0 should be outside " + target.ToString());

			/*** Open interval ***/
			target.IntervalType = Sharp3D.Math.Core.Interval.Type.Open;
			expected = true;
			actual = target.IsInside(0.5);
			Assert.AreEqual(expected, actual, "0.5 should be inside " + target.ToString());

			expected = false;
			actual = target.IsInside(0.0) && target.IsInside(1.0);
			Assert.AreEqual(expected, actual, "0.0 and 1.0 should be outside " + target.ToString());

			/*** OpenClosed interval ***/
			target.IntervalType = Sharp3D.Math.Core.Interval.Type.OpenClosed;
			expected = true;
			actual = target.IsInside(0.5) && target.IsInside(1.0);
			Assert.AreEqual(expected, actual, "0.5 and 1.0 should be inside " + target.ToString());

			expected = false;
			actual = target.IsInside(0.0);
			Assert.AreEqual(expected, actual, "0.0 should be outside " + target.ToString());
		}

		/// <summary>
		/// MaxTest is a test case for Max
		/// </summary>
		[TestMethod()]
		public void MaxTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			double val = 3.14;
			target.Max = val;

			Assert.AreEqual(val, target.Max);
		}

		/// <summary>
		/// MinTest is a test case for Min
		/// </summary>
		[TestMethod()]
		public void MinTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			double val = 3.14;
			target.Min = val;

			Assert.AreEqual(val, target.Min);
		}

		/// <summary>
		/// NotEqualTest is a test case for operator !=
		/// </summary>
		[TestMethod()]
		public void NotEqualTest()
		{
			Sharp3D.Math.Core.Interval left = null;
			Sharp3D.Math.Core.Interval right = null;

			bool expected;
			bool actual;

			// Test for interval type equality
			left = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			right = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			actual = left != right;
			expected = false;
			Assert.AreEqual(expected, actual);

			right.IntervalType = Sharp3D.Math.Core.Interval.Type.ClosedOpen;
			actual = left != right;
			expected = true;
			Assert.AreEqual(expected, actual);

			// Test for minimum-maximum equality
			left = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			right = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			actual = left != right;
			expected = false;
			Assert.AreEqual(expected, actual);

			right.Max = 2;
			actual = left != right;
			expected = true;
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// ValueEqualityTest is a test case for operator ==
		/// </summary>
		[TestMethod()]
		public void ValueEqualityTest()
		{
			Sharp3D.Math.Core.Interval left = null;
			Sharp3D.Math.Core.Interval right = null;

			bool expected;
			bool actual;

			// Test for interval type equality
			left = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			right = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			actual = left == right;
			expected = true;
			Assert.AreEqual(expected, actual);

			right.IntervalType = Sharp3D.Math.Core.Interval.Type.ClosedOpen;
			actual = left == right;
			expected = false;
			Assert.AreEqual(expected, actual);

			// Test for minimum-maximum equality
			left = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			right = new Sharp3D.Math.Core.Interval(Sharp3D.Math.Core.Interval.Type.Closed, 0, 1);
			actual = left == right;
			expected = true;
			Assert.AreEqual(expected, actual);

			right.Max = 2;
			actual = left == right;
			expected = false;
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// ToStringTest is a test case for ToString ()
		/// </summary>
		[TestMethod()]
		public void ToStringTest()
		{
			Sharp3D.Math.Core.Interval target = new Sharp3D.Math.Core.Interval();

			string expected;
			string actual;

			target.IntervalType = Sharp3D.Math.Core.Interval.Type.Closed;
			actual = target.ToString();
			expected = "[0, 1]";
			Assert.AreEqual(expected, actual, "Expected " + expected + " but got " + actual);

			target.IntervalType = Sharp3D.Math.Core.Interval.Type.ClosedOpen;
			actual = target.ToString();
			expected = "[0, 1)";
			Assert.AreEqual(expected, actual, "Expected " + expected + " but got " + actual);

			target.IntervalType = Sharp3D.Math.Core.Interval.Type.Open;
			actual = target.ToString();
			expected = "(0, 1)";
			Assert.AreEqual(expected, actual, "Expected " + expected + " but got " + actual);

			target.IntervalType = Sharp3D.Math.Core.Interval.Type.OpenClosed;
			actual = target.ToString();
			expected = "(0, 1]";
			Assert.AreEqual(expected, actual, "Expected " + expected + " but got " + actual);
		}

	}
}
