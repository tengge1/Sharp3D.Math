using Microsoft.VisualStudio.TestTools.UnitTesting;

// The following code was generated by Microsoft Test Code
//  Generation V1.0. The test owner should check each test
//  for validity.

namespace Sharp3D.Math.Core.Tests
{
	/// <summary>
	/// This is a test class for Matrix2F and is intended
	/// to contain all Matrix2F Unit Tests
	/// </summary>
	[TestClass()]
	public class Matrix2FTest
	{
		#region Initialization\Cleanup
		/// <summary>
		/// Initialize() is called once during test execution before
		/// test methods in this test class are executed.
		/// </summary>
		[TestInitialize()]
		public void Initialize()
		{
			//  TODO: Add test initialization code
		}

		/// <summary>
		/// Cleanup() is called once during test execution after
		/// test methods in this class have executed unless
		/// this test class' Initialize() method throws an exception.
		/// </summary>
		[TestCleanup()]
		public void Cleanup()
		{
			//  TODO: Add test cleanup code
		}
		#endregion

		#region TestContext
		private TestContext m_testContext = null;

		public TestContext TestContext
		{
			get { return m_testContext; }
			set { m_testContext = value; }
		}
		#endregion

		#region Constructors Tests
		/// <summary>
		/// ConstructorTest is a test case for Matrix2F (float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			float m11 = 1;
			float m12 = 2;
			float m21 = 3;
			float m22 = 4;

			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(m11, m12, m21, m22);

			Assert.AreEqual(m11, target.M11);
			Assert.AreEqual(m12, target.M12);
			Assert.AreEqual(m21, target.M21);
			Assert.AreEqual(m22, target.M22);
		}

		/// <summary>
		/// ConstructorTest1 is a test case for Matrix2F (float[])
		/// </summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			float[] elements = new float[4] { 1, 2, 3, 4 };

			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(elements);

			Assert.AreEqual(elements[0], target.M11);
			Assert.AreEqual(elements[1], target.M12);
		
			Assert.AreEqual(elements[2], target.M21);
			Assert.AreEqual(elements[3], target.M22);
		}

		/// <summary>
		/// ConstructorTest2 is a test case for Matrix2F (Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest2()
		{
			Sharp3D.Math.Core.Matrix2F m = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(m);

			Assert.AreEqual(m.M11, target.M11);
			Assert.AreEqual(m.M12, target.M12);
			Assert.AreEqual(m.M21, target.M21);
			Assert.AreEqual(m.M22, target.M22);
		}

		/// <summary>
		/// ConstructorTest3 is a test case for Matrix2F (Sharp3D.Math.Core.Vector2F, Sharp3D.Math.Core.Vector2F, Sharp3D.Math.Core.Vector2F, Sharp3D.Math.Core.Vector2F)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest3()
		{
			Sharp3D.Math.Core.Vector2F column1 = new Sharp3D.Math.Core.Vector2F(1, 3);
			Sharp3D.Math.Core.Vector2F column2 = new Sharp3D.Math.Core.Vector2F(2, 4);

			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(column1, column2);

			Assert.AreEqual(1.0f, target.M11);
			Assert.AreEqual(2.0f, target.M12);
			Assert.AreEqual(3.0f, target.M21);
			Assert.AreEqual(4.0f, target.M22);
		}
		#endregion

		#region Public Properties Tests
		/// <summary>
		/// GetTraceTest is a test case for Trace property
		/// </summary>
		[TestMethod()]
		public void TraceTest()
		{
			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);

			float expected = 1.0f + 4.0f;
			float actual = target.Trace;
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region ICloneable Tests
		/// <summary>
		/// CloneTest is a test case for Clone ()
		/// </summary>
		[TestMethod()]
		public void CloneTest()
		{
			Sharp3D.Math.Core.Matrix2F m = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(m);
			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);

			Sharp3D.Math.Core.Matrix2F actual = target.Clone();
			Assert.AreEqual(expected, actual);
		}

		#endregion

		#region Public Static Parse Methods Tests
		/// <summary>
		/// ParseTest is a test case for Parse (string)
		/// </summary>
		[TestMethod()]
		public void ParseTest()
		{
			string value;
			Sharp3D.Math.Core.Matrix2F expected = new Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F actual;

			value = "2x2[1,2,3,4]";
			actual = Sharp3D.Math.Core.Matrix2F.Parse(value);
			Assert.AreEqual(expected, actual);

			value = "2x2  [1, 2,3,4]";
			actual = Sharp3D.Math.Core.Matrix2F.Parse(value);
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// ParseTest is a test case for Parse (string)
		/// Verifies the exception thrown when illegal input is given.
		/// </summary>
		[TestMethod()]
		[ExpectedException(typeof(Sharp3D.Math.Core.ParseException))]
		public void ParseExceptionTest()
		{
			Sharp3D.Math.Core.Matrix2F.Parse("[1,2]");
		}
		/// <summary>
		/// TryParseTest is a test case for TryParse (string, Sharp3D.Math.Core.Vector2F)
		/// </summary>
		[TestMethod()]
		public void TryParseTest()
		{
			string value = "2x2[1, 2, 3, 4]";
			Sharp3D.Math.Core.Matrix2F result = Matrix2F.Zero;

			Sharp3D.Math.Core.Matrix2F expectedResult = new Matrix2F(1, 2, 3, 4);
			bool expected = true;
			bool actual;

			actual = Sharp3D.Math.Core.Matrix2F.TryParse(value, out result);
			Assert.AreEqual(expected, actual);
			Assert.AreEqual(expectedResult, result);
		}
		[TestMethod()]
		public void TryParseFailTest()
		{
			string value = "[1,2)";
			Sharp3D.Math.Core.Matrix2F result = Matrix2F.Zero;

			Matrix2F expectedResult = Matrix2F.Zero;
			bool expected = false;
			bool actual;

			actual = Sharp3D.Math.Core.Matrix2F.TryParse(value, out result);
			Assert.AreEqual(expected, actual);
			Assert.AreEqual(expectedResult, result);
		}
		#endregion

		#region Public Metods Tests
		/// <summary>
		/// GetDeterminantTest is a test case for GetDeterminant ()
		/// </summary>
		[TestMethod()]
		public void GetDeterminantTest()
		{
			Sharp3D.Math.Core.Matrix2F target;
			float expected;
			float actual;

			target = new Matrix2F(1, 2, 3, 4);
			expected = -2.0f;
			actual = target.GetDeterminant();
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// TransposeTest is a test case for Transpose ()
		/// </summary>
		[TestMethod()]
		public void TransposeTest()
		{
			Sharp3D.Math.Core.Matrix2F source = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(source);
			Sharp3D.Math.Core.Matrix2F expected = new Matrix2F(1, 3, 2, 4);

			target.Transpose();

			Assert.AreEqual(expected, target);
		}
		#endregion

		#region System.Object Overrides Tests
		/// <summary>
		/// EqualsTest is a test case for Equals (object)
		/// </summary>
		[TestMethod()]
		public void EqualsTest()
		{
			Sharp3D.Math.Core.Matrix2F m = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(m);

			bool expected;
			bool actual;

			expected = true;
			actual = target.Equals(m);
			Assert.AreEqual(expected, actual, m.ToString() + " should be equal to " + target.ToString());

			expected = false;
			m.M11 = 10;
			actual = target.Equals(m);
			Assert.AreEqual(expected, actual, m.ToString() + " should not be equal to " + target.ToString());
		}
		/// <summary>
		/// ToStringTest is a test case for ToString ()
		/// </summary>
		[TestMethod()]
		public void ToStringTest()
		{
			Sharp3D.Math.Core.Matrix2F target = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);

			string expected = "2x2[1, 2, 3, 4]";
			string actual;

			actual = target.ToString();
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Public Static Matrix Arithmetics
		/// <summary>
		/// AddMatrixScalarResultTest is a test case for Add (Sharp3D.Math.Core.Matrix2F, float, Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void AddMatrixScalarResultTest()
		{
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			float scalar = 1.0f;
			Sharp3D.Math.Core.Matrix2F result = new Sharp3D.Math.Core.Matrix2F();
			Sharp3D.Math.Core.Matrix2F expected = new Matrix2F(2, 3, 4, 5);

			Sharp3D.Math.Core.Matrix2F.Add(matrix, scalar, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// AddMatrixMatrixResultTest is a test case for Add (Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void AddMatrixMatrixResultTest()
		{
			Sharp3D.Math.Core.Matrix2F left = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F right = new Sharp3D.Math.Core.Matrix2F(4, 3, 2, 1);
			Sharp3D.Math.Core.Matrix2F result = Sharp3D.Math.Core.Matrix2F.Zero;
			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(5, 5, 5, 5);

			Sharp3D.Math.Core.Matrix2F.Add(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// SubtractMatrixScalarResultTest is a test case for Subtract (Sharp3D.Math.Core.Matrix2F, float, Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixScalarResultTest()
		{
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			float scalar = 1.0f;
			Sharp3D.Math.Core.Matrix2F result = Sharp3D.Math.Core.Matrix2F.Zero;
			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(0, 1, 2, 3);

			Sharp3D.Math.Core.Matrix2F.Subtract(matrix, scalar, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// SubtractTest3 is a test case for Subtract (Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixMatrixResultTest()
		{
			Sharp3D.Math.Core.Matrix2F left = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F right = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F result = Sharp3D.Math.Core.Matrix2F.Identity;
			Sharp3D.Math.Core.Matrix2F expected = Sharp3D.Math.Core.Matrix2F.Zero;

			Sharp3D.Math.Core.Matrix2F.Subtract(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// MultiplyMatrixMatrixResultTest is a test case for Multiply (Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void MultiplyMatrixMatrixResultTest()
		{
			Sharp3D.Math.Core.Matrix2F left = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F right = new Sharp3D.Math.Core.Matrix2F(5, 6, 7, 8);
			Sharp3D.Math.Core.Matrix2F result = Sharp3D.Math.Core.Matrix2F.Zero;
			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(19, 22, 43, 50);

			Sharp3D.Math.Core.Matrix2F.Multiply(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// TransposeTest1 is a test case for Transpose (Sharp3D.Math.Core.Matrix2F)
		/// </summary>
		[TestMethod()]
		public void TransposeTest1()
		{
			Sharp3D.Math.Core.Matrix2F m = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F expected = new Matrix2F(1, 3, 2, 4);
			Sharp3D.Math.Core.Matrix2F actual;

			actual = Sharp3D.Math.Core.Matrix2F.Transpose(m);
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Comparison Operators Tests
		/// <summary>
		/// ValueEqualityTest is a test case for operator ==
		/// </summary>
		[TestMethod()]
		public void ValueEqualityTest()
		{
			Sharp3D.Math.Core.Matrix2F left;
			Sharp3D.Math.Core.Matrix2F right;

			bool expected;
			bool actual;

			left = new Matrix2F(1, 2, 3, 4);
			right = new Matrix2F(1, 2, 3, 4);
			expected = true;
			actual = (left == right);
			Assert.AreEqual(expected, actual);

			left = new Matrix2F(1, 21, 3, 4);
			right = new Matrix2F(1, 2, 3, 4);
			expected = false;
			actual = (left == right);
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// NotEqualTest is a test case for operator !=
		/// </summary>
		[TestMethod()]
		public void NotEqualTest()
		{
			Sharp3D.Math.Core.Matrix2F left;
			Sharp3D.Math.Core.Matrix2F right;

			bool expected;
			bool actual;

			left = new Matrix2F(1, 2, 3, 4);
			right = new Matrix2F(1, 2, 3, 4);
			expected = false;
			actual = (left != right);
			Assert.AreEqual(expected, actual);

			left = new Matrix2F(1, 2, 31, 4);
			right = new Matrix2F(1, 2, 3, 4);
			expected = true;
			actual = (left != right);
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Binary Operators Tests
		/// <summary>
		/// SubtractMatrixMatrixTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixMatrixTest()
		{
			Sharp3D.Math.Core.Matrix2F left = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F right = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);

			Sharp3D.Math.Core.Matrix2F expected = Matrix2F.Zero;
			Sharp3D.Math.Core.Matrix2F actual;

			actual = left - right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// SubtractMatrixScalarTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixScalarTest()
		{
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			float scalar = 1.0f;

			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(0, 1, 2, 3);
			Sharp3D.Math.Core.Matrix2F actual;

			actual = matrix - scalar;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// MultiplyMatrixMatrixTest is a test case for operator *
		/// </summary>
		[TestMethod()]
		public void MultiplyMatrixMatrixTest()
		{
			Sharp3D.Math.Core.Matrix2F left = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F right = new Sharp3D.Math.Core.Matrix2F(5, 6, 7, 8);

			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(19, 22, 43, 50);
			Sharp3D.Math.Core.Matrix2F actual;

			actual = left * right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddMatrixMatrixTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddMatrixMatrixTest()
		{
			Sharp3D.Math.Core.Matrix2F left = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);
			Sharp3D.Math.Core.Matrix2F right = new Sharp3D.Math.Core.Matrix2F(4, 3, 2, 1);

			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(5, 5, 5, 5);
			Sharp3D.Math.Core.Matrix2F actual;

			actual = left + right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddScalarMatrixTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddScalarMatrixTest()
		{
			float scalar = 1.0f;
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);

			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(2, 3, 4, 5);
			Sharp3D.Math.Core.Matrix2F actual;

			actual = scalar + matrix;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddMatrixScalarTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddMatrixScalarTest()
		{
			float scalar = 1.0f;
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(1, 2, 3, 4);

			Sharp3D.Math.Core.Matrix2F expected = new Sharp3D.Math.Core.Matrix2F(2, 3, 4, 5);
			Sharp3D.Math.Core.Matrix2F actual;

			actual = matrix + scalar;
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Index Operator Tests
		/// <summary>
		/// ItemTest is a test case for this[int index]
		/// </summary>
		[TestMethod()]
		public void ItemTest()
		{
			Sharp3D.Math.Core.Matrix2F target = new Matrix2F(1, 2, 3, 4);

			Assert.AreEqual(target.M11, target[0]);
			Assert.AreEqual(target.M12, target[1]);

			Assert.AreEqual(target.M21, target[2]);
			Assert.AreEqual(target.M22, target[3]);
		}
		[TestMethod()]
		[ExpectedException(typeof(System.IndexOutOfRangeException))]
		public void ItemTest1()
		{
			Sharp3D.Math.Core.Matrix2F target = new Matrix2F(1, 2, 3, 4);
			target[16]++;
		}
		/// <summary>
		/// ItemTest is a test case for this[int row, int column]
		/// </summary>
		[TestMethod()]
		public void ItemTest2()
		{
			Sharp3D.Math.Core.Matrix2F target = new Matrix2F(1, 2, 3, 4);

			Assert.AreEqual(target.M11, target[1,1]);
			Assert.AreEqual(target.M12, target[1,2]);

			Assert.AreEqual(target.M21, target[2,1]);
			Assert.AreEqual(target.M22, target[2,2]);
		}
		#endregion

		/// <summary>
		/// TransformTest is a test case for Transform (Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Vector2F)
		/// </summary>
		[TestMethod()]
		public void TransformMatrixVectorTest()
		{
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(
				2,0,
				0,2
				);
			Sharp3D.Math.Core.Vector2F vector = new Sharp3D.Math.Core.Vector2F(1,2);

			Sharp3D.Math.Core.Vector2F expected = new Sharp3D.Math.Core.Vector2F(2,4);
			Sharp3D.Math.Core.Vector2F actual;

			actual = Sharp3D.Math.Core.Matrix2F.Transform(matrix, vector);
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// TransformMatrixVectorResultTest is a test case for Transform (Sharp3D.Math.Core.Matrix2F, Sharp3D.Math.Core.Vector2F, Sharp3D.Math.Core.Vector2F)
		/// </summary>
		[TestMethod()]
		public void TransformMatrixVectorResultTest()
		{
			Sharp3D.Math.Core.Matrix2F matrix = new Sharp3D.Math.Core.Matrix2F(
				2, 0,
				0, 2
				);
			Sharp3D.Math.Core.Vector2F vector = new Sharp3D.Math.Core.Vector2F(1, 2);
			Sharp3D.Math.Core.Vector2F result = new Sharp3D.Math.Core.Vector2F();
			Sharp3D.Math.Core.Vector2F expected = new Sharp3D.Math.Core.Vector2F(2, 4);

			Sharp3D.Math.Core.Matrix2F.Transform(matrix, vector, ref result);

			Assert.AreEqual(expected, result);
		}
	}
}
