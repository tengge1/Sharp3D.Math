using Microsoft.VisualStudio.TestTools.UnitTesting;

// The following code was generated by Microsoft Test Code
//  Generation V1.0. The test owner should check each test
//  for validity.

namespace Sharp3D.Math.Core.Tests
{
	/// <summary>
	/// This is a test class for Matrix4D and is intended
	/// to contain all Matrix4D Unit Tests
	/// </summary>
	[TestClass()]
	public class Matrix4DTest
	{
		#region Initialization\Cleanup
		/// <summary>
		/// Initialize() is called once during test execution before
		/// test methods in this test class are executed.
		/// </summary>
		[TestInitialize()]
		public void Initialize()
		{
			//  TODO: Add test initialization code
		}

		/// <summary>
		/// Cleanup() is called once during test execution after
		/// test methods in this class have executed unless
		/// this test class' Initialize() method throws an exception.
		/// </summary>
		[TestCleanup()]
		public void Cleanup()
		{
			//  TODO: Add test cleanup code
		}
		#endregion

		#region TestContext
		private TestContext m_testContext = null;

		public TestContext TestContext
		{
			get { return m_testContext; }
			set { m_testContext = value; }
		}
		#endregion

		#region Constructors Tests
		/// <summary>
		/// ConstructorTest is a test case for Matrix4D (double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			double m11 = 1;
			double m12 = 2;
			double m13 = 3;
			double m14 = 4;
			double m21 = 5;
			double m22 = 6;
			double m23 = 7;
			double m24 = 8;
			double m31 = 9;
			double m32 = 10;
			double m33 = 11;
			double m34 = 12;
			double m41 = 13;
			double m42 = 14;
			double m43 = 15;
			double m44 = 16;

			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);

			Assert.AreEqual(m11, target.M11);
			Assert.AreEqual(m12, target.M12);
			Assert.AreEqual(m13, target.M13);
			Assert.AreEqual(m14, target.M14);
			Assert.AreEqual(m21, target.M21);
			Assert.AreEqual(m22, target.M22);
			Assert.AreEqual(m23, target.M23);
			Assert.AreEqual(m24, target.M24);
			Assert.AreEqual(m31, target.M31);
			Assert.AreEqual(m32, target.M32);
			Assert.AreEqual(m33, target.M33);
			Assert.AreEqual(m34, target.M34);
			Assert.AreEqual(m41, target.M41);
			Assert.AreEqual(m42, target.M42);
			Assert.AreEqual(m43, target.M43);
			Assert.AreEqual(m44, target.M44);
		}

		/// <summary>
		/// ConstructorTest1 is a test case for Matrix4D (double[])
		/// </summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			double[] elements = new double[16] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(elements);

			Assert.AreEqual(elements[0], target.M11);
			Assert.AreEqual(elements[1], target.M12);
			Assert.AreEqual(elements[2], target.M13);
			Assert.AreEqual(elements[3], target.M14);
			Assert.AreEqual(elements[4], target.M21);
			Assert.AreEqual(elements[5], target.M22);
			Assert.AreEqual(elements[6], target.M23);
			Assert.AreEqual(elements[7], target.M24);
			Assert.AreEqual(elements[8], target.M31);
			Assert.AreEqual(elements[9], target.M32);
			Assert.AreEqual(elements[10], target.M33);
			Assert.AreEqual(elements[11], target.M34);
			Assert.AreEqual(elements[12], target.M41);
			Assert.AreEqual(elements[13], target.M42);
			Assert.AreEqual(elements[14], target.M43);
			Assert.AreEqual(elements[15], target.M44);
		}

		/// <summary>
		/// ConstructorTest2 is a test case for Matrix4D (Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest2()
		{
			Sharp3D.Math.Core.Matrix4D m = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(m);

			Assert.AreEqual(m.M11, target.M11);
			Assert.AreEqual(m.M12, target.M12);
			Assert.AreEqual(m.M13, target.M13);
			Assert.AreEqual(m.M14, target.M14);
			Assert.AreEqual(m.M21, target.M21);
			Assert.AreEqual(m.M22, target.M22);
			Assert.AreEqual(m.M23, target.M23);
			Assert.AreEqual(m.M24, target.M24);
			Assert.AreEqual(m.M31, target.M31);
			Assert.AreEqual(m.M32, target.M32);
			Assert.AreEqual(m.M33, target.M33);
			Assert.AreEqual(m.M34, target.M34);
			Assert.AreEqual(m.M41, target.M41);
			Assert.AreEqual(m.M42, target.M42);
			Assert.AreEqual(m.M43, target.M43);
			Assert.AreEqual(m.M44, target.M44);
		}

		/// <summary>
		/// ConstructorTest3 is a test case for Matrix4D (Sharp3D.Math.Core.Vector4D, Sharp3D.Math.Core.Vector4D, Sharp3D.Math.Core.Vector4D, Sharp3D.Math.Core.Vector4D)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest3()
		{
			Sharp3D.Math.Core.Vector4D column1 = new Sharp3D.Math.Core.Vector4D(1, 5, 9, 13);
			Sharp3D.Math.Core.Vector4D column2 = new Sharp3D.Math.Core.Vector4D(2, 6, 10, 14);
			Sharp3D.Math.Core.Vector4D column3 = new Sharp3D.Math.Core.Vector4D(3, 7, 11, 15);
			Sharp3D.Math.Core.Vector4D column4 = new Sharp3D.Math.Core.Vector4D(4, 8, 12, 16);

			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(column1, column2, column3, column4);

			Assert.AreEqual(1.0, target.M11);
			Assert.AreEqual(2.0, target.M12);
			Assert.AreEqual(3.0, target.M13);
			Assert.AreEqual(4.0, target.M14);
			Assert.AreEqual(5.0, target.M21);
			Assert.AreEqual(6.0, target.M22);
			Assert.AreEqual(7.0, target.M23);
			Assert.AreEqual(8.0, target.M24);
			Assert.AreEqual(9.0, target.M31);
			Assert.AreEqual(10.0, target.M32);
			Assert.AreEqual(11.0, target.M33);
			Assert.AreEqual(12.0, target.M34);
			Assert.AreEqual(13.0, target.M41);
			Assert.AreEqual(14.0, target.M42);
			Assert.AreEqual(15.0, target.M43);
			Assert.AreEqual(16.0, target.M44);
		}
		#endregion

		#region Public Properties Tests
		/// <summary>
		/// GetTraceTest is a test case for Trace property
		/// </summary>
		[TestMethod()]
		public void TraceTest()
		{
			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			double expected = 1.0 + 6.0 + 11.0 + 16.0;
			double actual = target.Trace;
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region ICloneable Tests
		/// <summary>
		/// CloneTest is a test case for Clone ()
		/// </summary>
		[TestMethod()]
		public void CloneTest()
		{
			Sharp3D.Math.Core.Matrix4D m = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(m);
			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			Sharp3D.Math.Core.Matrix4D actual = target.Clone();
			Assert.AreEqual(expected, actual);
		}

		#endregion

		#region Public Static Parse Methods Tests
		/// <summary>
		/// ParseTest is a test case for Parse (string)
		/// </summary>
		[TestMethod()]
		public void ParseTest()
		{
			string value;
			Sharp3D.Math.Core.Matrix4D expected = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D actual;

			value = "4x4[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]";
			actual = Sharp3D.Math.Core.Matrix4D.Parse(value);
			Assert.AreEqual(expected, actual);

			value = "4x4  [1, 2,3,4,5,6,7,8,9,10,11,12,13,   14,15,16]";
			actual = Sharp3D.Math.Core.Matrix4D.Parse(value);
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// ParseTest is a test case for Parse (string)
		/// Verifies the exception thrown when illegal input is given.
		/// </summary>
		[TestMethod()]
		[ExpectedException(typeof(Sharp3D.Math.Core.ParseException))]
		public void ParseExceptionTest()
		{
			Sharp3D.Math.Core.Matrix4D.Parse("[1,2]");
		}
		/// <summary>
		/// TryParseTest is a test case for TryParse (string, Sharp3D.Math.Core.Vector2D)
		/// </summary>
		[TestMethod()]
		public void TryParseTest()
		{
			string value = "4x4[1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16]";
			Sharp3D.Math.Core.Matrix4D result = Matrix4D.Zero;

			Sharp3D.Math.Core.Matrix4D expectedResult = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			bool expected = true;
			bool actual;

			actual = Sharp3D.Math.Core.Matrix4D.TryParse(value, out result);
			Assert.AreEqual(expected, actual);
			Assert.AreEqual(expectedResult, result);
		}
		[TestMethod()]
		public void TryParseFailTest()
		{
			string value = "[1,2)";
			Sharp3D.Math.Core.Matrix3D result = Matrix3D.Zero;

			Matrix3D expectedResult = Matrix3D.Zero;
			bool expected = false;
			bool actual;

			actual = Sharp3D.Math.Core.Matrix3D.TryParse(value, out result);
			Assert.AreEqual(expected, actual);
			Assert.AreEqual(expectedResult, result);
		}
		#endregion

		#region Public Metods Tests
		/// <summary>
		/// GetDeterminantTest is a test case for GetDeterminant ()
		/// </summary>
		[TestMethod()]
		public void GetDeterminantTest()
		{
			Sharp3D.Math.Core.Matrix4D target;
			double expected;
			double actual;

			target = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			expected = 0.0;
			actual = target.GetDeterminant();
			Assert.AreEqual(expected, actual);

			target = new Matrix4D(2, 3, 4, 6, 7, 8, 5, 2, 2, 3, 1, 1, 3, 5, 4, -1);
			expected = -112.0;
			actual = target.GetDeterminant();
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// TransposeTest is a test case for Transpose ()
		/// </summary>
		[TestMethod()]
		public void TransposeTest()
		{
			Sharp3D.Math.Core.Matrix4D source = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(source);
			Sharp3D.Math.Core.Matrix4D expected = new Matrix4D(1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16);

			target.Transpose();

			Assert.AreEqual(expected, target);
		}
		#endregion

		#region System.Object Overrides Tests
		/// <summary>
		/// EqualsTest is a test case for Equals (object)
		/// </summary>
		[TestMethod()]
		public void EqualsTest()
		{
			Sharp3D.Math.Core.Matrix4D m = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(m);

			bool expected;
			bool actual;

			expected = true;
			actual = target.Equals(m);
			Assert.AreEqual(expected, actual, m.ToString() + " should be equal to " + target.ToString());

			expected = false;
			m.M11 = 10;
			actual = target.Equals(m);
			Assert.AreEqual(expected, actual, m.ToString() + " should not be equal to " + target.ToString());
		}
		/// <summary>
		/// ToStringTest is a test case for ToString ()
		/// </summary>
		[TestMethod()]
		public void ToStringTest()
		{
			Sharp3D.Math.Core.Matrix4D target = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			string expected = "4x4[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]";
			string actual;

			actual = target.ToString();
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Public Static Matrix Arithmetics
		/// <summary>
		/// AddMatrixScalarResultTest is a test case for Add (Sharp3D.Math.Core.Matrix4D, double, Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void AddMatrixScalarResultTest()
		{
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			double scalar = 1.0;
			Sharp3D.Math.Core.Matrix4D result = new Sharp3D.Math.Core.Matrix4D();
			Sharp3D.Math.Core.Matrix4D expected = new Matrix4D(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);

			Sharp3D.Math.Core.Matrix4D.Add(matrix, scalar, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// AddMatrixMatrixResultTest is a test case for Add (Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void AddMatrixMatrixResultTest()
		{
			Sharp3D.Math.Core.Matrix4D left = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D right = new Sharp3D.Math.Core.Matrix4D(16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);
			Sharp3D.Math.Core.Matrix4D result = Sharp3D.Math.Core.Matrix4D.Zero;
			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17);

			Sharp3D.Math.Core.Matrix4D.Add(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// SubtractMatrixScalarResultTest is a test case for Subtract (Sharp3D.Math.Core.Matrix4D, double, Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixScalarResultTest()
		{
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			double scalar = 1.0;
			Sharp3D.Math.Core.Matrix4D result = Sharp3D.Math.Core.Matrix4D.Zero;
			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

			Sharp3D.Math.Core.Matrix4D.Subtract(matrix, scalar, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// SubtractTest3 is a test case for Subtract (Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixMatrixResultTest()
		{
			Sharp3D.Math.Core.Matrix4D left = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D right = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D result = Sharp3D.Math.Core.Matrix4D.Identity;
			Sharp3D.Math.Core.Matrix4D expected = Sharp3D.Math.Core.Matrix4D.Zero;

			Sharp3D.Math.Core.Matrix4D.Subtract(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// MultiplyMatrixMatrixResultTest is a test case for Multiply (Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void MultiplyMatrixMatrixResultTest()
		{
			Sharp3D.Math.Core.Matrix4D left = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D right = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 1, 2, 3, 6, 5, 1, 7, 3, 2, 6, 1);
			Sharp3D.Math.Core.Matrix4D result = Sharp3D.Math.Core.Matrix4D.Zero;
			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(41, 27, 34, 35, 101, 67, 82, 95, 161, 107, 130, 155, 221, 147, 178, 215);

			Sharp3D.Math.Core.Matrix4D.Multiply(left, right, ref result);

			Assert.AreEqual(expected, result);
		}
		/// <summary>
		/// TransposeTest1 is a test case for Transpose (Sharp3D.Math.Core.Matrix4D)
		/// </summary>
		[TestMethod()]
		public void TransposeTest1()
		{
			Sharp3D.Math.Core.Matrix4D m = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D expected = new Matrix4D(1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16);
			Sharp3D.Math.Core.Matrix4D actual;

			actual = Sharp3D.Math.Core.Matrix4D.Transpose(m);
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Comparison Operators Tests
		/// <summary>
		/// ValueEqualityTest is a test case for operator ==
		/// </summary>
		[TestMethod()]
		public void ValueEqualityTest()
		{
			Sharp3D.Math.Core.Matrix4D left;
			Sharp3D.Math.Core.Matrix4D right;

			bool expected;
			bool actual;

			left = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			right = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			expected = true;
			actual = (left == right);
			Assert.AreEqual(expected, actual);

			left = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 91, 10, 11, 12, 13, 14, 15, 16);
			right = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			expected = false;
			actual = (left == right);
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// NotEqualTest is a test case for operator !=
		/// </summary>
		[TestMethod()]
		public void NotEqualTest()
		{
			Sharp3D.Math.Core.Matrix4D left;
			Sharp3D.Math.Core.Matrix4D right;

			bool expected;
			bool actual;

			left = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			right = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			expected = false;
			actual = (left != right);
			Assert.AreEqual(expected, actual);

			left = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 91, 10, 11, 12, 13, 14, 15, 16);
			right = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			expected = true;
			actual = (left != right);
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Binary Operators Tests
		/// <summary>
		/// SubtractMatrixMatrixTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixMatrixTest()
		{
			Sharp3D.Math.Core.Matrix4D left = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D right = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			Sharp3D.Math.Core.Matrix4D expected = Matrix4D.Zero;
			Sharp3D.Math.Core.Matrix4D actual;

			actual = left - right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// SubtractMatrixScalarTest is a test case for operator -
		/// </summary>
		[TestMethod()]
		public void SubtractMatrixScalarTest()
		{
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			double scalar = 1.0;

			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
			Sharp3D.Math.Core.Matrix4D actual;

			actual = matrix - scalar;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// MultiplyMatrixMatrixTest is a test case for operator *
		/// </summary>
		[TestMethod()]
		public void MultiplyMatrixMatrixTest()
		{
			Sharp3D.Math.Core.Matrix4D left = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D right = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 1, 2, 3, 6, 5, 1, 7, 3, 2, 6, 1);

			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(41, 27, 34, 35, 101, 67, 82, 95, 161, 107, 130, 155, 221, 147, 178, 215);
			Sharp3D.Math.Core.Matrix4D actual;

			actual = left * right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddMatrixMatrixTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddMatrixMatrixTest()
		{
			Sharp3D.Math.Core.Matrix4D left = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			Sharp3D.Math.Core.Matrix4D right = new Sharp3D.Math.Core.Matrix4D(16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);

			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17);
			Sharp3D.Math.Core.Matrix4D actual;

			actual = left + right;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddScalarMatrixTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddScalarMatrixTest()
		{
			double scalar = 1.0;
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
			Sharp3D.Math.Core.Matrix4D actual;

			actual = scalar + matrix;
			Assert.AreEqual(expected, actual);
		}
		/// <summary>
		/// AddMatrixScalarTest is a test case for operator +
		/// </summary>
		[TestMethod()]
		public void AddMatrixScalarTest()
		{
			double scalar = 1.0;
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			Sharp3D.Math.Core.Matrix4D expected = new Sharp3D.Math.Core.Matrix4D(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
			Sharp3D.Math.Core.Matrix4D actual;

			actual = matrix + scalar;
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region Index Operator Tests
		/// <summary>
		/// ItemTest is a test case for this[int index]
		/// </summary>
		[TestMethod()]
		public void ItemTest()
		{
			Sharp3D.Math.Core.Matrix4D target = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			Assert.AreEqual(target.M11, target[0]);
			Assert.AreEqual(target.M12, target[1]);
			Assert.AreEqual(target.M13, target[2]);
			Assert.AreEqual(target.M14, target[3]);

			Assert.AreEqual(target.M21, target[4]);
			Assert.AreEqual(target.M22, target[5]);
			Assert.AreEqual(target.M23, target[6]);
			Assert.AreEqual(target.M24, target[7]);

			Assert.AreEqual(target.M31, target[8]);
			Assert.AreEqual(target.M32, target[9]);
			Assert.AreEqual(target.M33, target[10]);
			Assert.AreEqual(target.M34, target[11]);

			Assert.AreEqual(target.M41, target[12]);
			Assert.AreEqual(target.M42, target[13]);
			Assert.AreEqual(target.M43, target[14]);
			Assert.AreEqual(target.M44, target[15]);
		}
		[TestMethod()]
		[ExpectedException(typeof(System.IndexOutOfRangeException))]
		public void ItemTest1()
		{
			Sharp3D.Math.Core.Matrix4D target = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
			target[16]++;
		}
		/// <summary>
		/// ItemTest is a test case for this[int row, int column]
		/// </summary>
		[TestMethod()]
		public void ItemTest2()
		{
			Sharp3D.Math.Core.Matrix4D target = new Matrix4D(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

			Assert.AreEqual(target.M11, target[1,1]);
			Assert.AreEqual(target.M12, target[1,2]);
			Assert.AreEqual(target.M13, target[1,3]);
			Assert.AreEqual(target.M14, target[1,4]);

			Assert.AreEqual(target.M21, target[2,1]);
			Assert.AreEqual(target.M22, target[2,2]);
			Assert.AreEqual(target.M23, target[2,3]);
			Assert.AreEqual(target.M24, target[2,4]);

			Assert.AreEqual(target.M31, target[3,1]);
			Assert.AreEqual(target.M32, target[3,2]);
			Assert.AreEqual(target.M33, target[3,3]);
			Assert.AreEqual(target.M34, target[3,4]);

			Assert.AreEqual(target.M41, target[4,1]);
			Assert.AreEqual(target.M42, target[4,2]);
			Assert.AreEqual(target.M43, target[4,3]);
			Assert.AreEqual(target.M44, target[4,4]);
		}
		#endregion

		/// <summary>
		/// TransformTest is a test case for Transform (Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Vector4D)
		/// </summary>
		[TestMethod()]
		public void TransformMatrixVectorTest()
		{
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(
				2,0,0,0,
				0,2,0,0,
				0,0,2,0,
				0,0,0,1
				);
			Sharp3D.Math.Core.Vector4D vector = new Sharp3D.Math.Core.Vector4D(1,2,3,1);

			Sharp3D.Math.Core.Vector4D expected = new Sharp3D.Math.Core.Vector4D(2,4,6,1);
			Sharp3D.Math.Core.Vector4D actual;

			actual = Sharp3D.Math.Core.Matrix4D.Transform(matrix, vector);
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// TransformMatrixVectorResultTest is a test case for Transform (Sharp3D.Math.Core.Matrix4D, Sharp3D.Math.Core.Vector4D, Sharp3D.Math.Core.Vector4D)
		/// </summary>
		[TestMethod()]
		public void TransformMatrixVectorResultTest()
		{
			Sharp3D.Math.Core.Matrix4D matrix = new Sharp3D.Math.Core.Matrix4D(
				2, 0, 0, 0,
				0, 2, 0, 0,
				0, 0, 2, 0,
				0, 0, 0, 1
				);
			Sharp3D.Math.Core.Vector4D vector = new Sharp3D.Math.Core.Vector4D(1, 2, 3, 1);
			Sharp3D.Math.Core.Vector4D result = new Sharp3D.Math.Core.Vector4D();
			Sharp3D.Math.Core.Vector4D expected = new Sharp3D.Math.Core.Vector4D(2, 4, 6, 1);

			Sharp3D.Math.Core.Matrix4D.Transform(matrix, vector, ref result);

			Assert.AreEqual(expected, result);
		}
	}
}
