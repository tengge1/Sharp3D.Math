using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

// The following code was generated by Microsoft Test Code
//  Generation V1.0. The test owner should check each test
//  for validity.

namespace Sharp3D.Math.Core.Tests
{
	/// <summary>
	/// This is a test class for QuaternionD and is intended
	/// to contain all QuaternionD Unit Tests
	/// </summary>
	[TestClass()]
	public class QuaternionDTest
	{
		#region Initialize\Cleanup
		/// <summary>
		/// Initialize() is called once during test execution before
		/// test methods in this test class are executed.
		/// </summary>
		[TestInitialize()]
		public void Initialize()
		{
			//  TODO: Add test initialization code
		}

		/// <summary>
		/// Cleanup() is called once during test execution after
		/// test methods in this class have executed unless
		/// this test class' Initialize() method throws an exception.
		/// </summary>
		[TestCleanup()]
		public void Cleanup()
		{
			//  TODO: Add test cleanup code
		}
		#endregion

		#region TestContext
		private TestContext m_testContext = null;

		public TestContext TestContext
		{
			get { return m_testContext; }
			set { m_testContext = value; }
		}
		#endregion

		#region Constructors Tests
		/// <summary>
		/// ConstructorTest is a test case for QuaternionD (double, double, double, double)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			double w = 1.0;
			double x = 2.0;
			double y = 3.0;
			double z = 4.0;

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(w, x, y, z);

			Assert.AreEqual(target.W, 1.0);
			Assert.AreEqual(target.X, 2.0);
			Assert.AreEqual(target.Y, 3.0);
			Assert.AreEqual(target.Z, 4.0);
		}

		/// <summary>
		/// ConstructorTest1 is a test case for QuaternionD (double[])
		/// </summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			double[] coordinates = new double[4] { 1.0, 2.0, 3.0, 4.0 };

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(coordinates);

			Assert.AreEqual(target.W, 1.0);
			Assert.AreEqual(target.X, 2.0);
			Assert.AreEqual(target.Y, 3.0);
			Assert.AreEqual(target.Z, 4.0);
		}

		/// <summary>
		/// ConstructorTest2 is a test case for QuaternionD (Sharp3D.Math.Core.QuaternionD)
		/// </summary>
		[TestMethod()]
		public void ConstructorTest2()
		{
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD(1, 2, 3, 4);
			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			Assert.AreEqual(target.W, 1.0);
			Assert.AreEqual(target.X, 2.0);
			Assert.AreEqual(target.Y, 3.0);
			Assert.AreEqual(target.Z, 4.0);
		}
		#endregion

		#region Public Properties Tests
		#endregion



/// <summary>
/// AddTest is a test case for Add (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void AddTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Add(left, right);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// AddTest1 is a test case for Add (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void AddTest1()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD result = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD.Add(left, right, ref result);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ClampZeroTest is a test case for ClampZero ()
/// </summary>
		[TestMethod()]
		public void ClampZeroTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			target.ClampZero();

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ClampZeroTest1 is a test case for ClampZero (double)
/// </summary>
		[TestMethod()]
		public void ClampZeroTest1()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			//  TODO: Initialize to an appropriate value
			double tolerance = 0;

			target.ClampZero(tolerance);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// CloneTest is a test case for Clone ()
/// </summary>
		[TestMethod()]
		public void CloneTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = target.Clone();
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// DivideTest is a test case for Divide (Sharp3D.Math.Core.QuaternionD, double)
/// </summary>
		[TestMethod()]
		public void DivideTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			double scalar = 0;

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Divide(quaternion, scalar);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// DivideTest1 is a test case for Divide (Sharp3D.Math.Core.QuaternionD, double, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void DivideTest1()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			double scalar = 0;
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD result = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD.Divide(quaternion, scalar, ref result);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// DotProductTest is a test case for DotProduct (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void DotProductTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			double expected = 0;
			double actual;

			actual = Sharp3D.Math.Core.QuaternionD.DotProduct(left, right);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// EqualsTest is a test case for Equals (object)
/// </summary>
		[TestMethod()]
		public void EqualsTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			//  TODO: Initialize to an appropriate value
			object obj = null;

			bool expected = false;
			bool actual;

			actual = target.Equals(obj);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ExpTest is a test case for Exp (Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void ExpTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD target_quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(target_quaternion);

			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD Exp_quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = target.Exp(Exp_quaternion);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ConversionTest is a test case for explicit operator
/// </summary>
		[TestMethod()]
		public void ConversionTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			double[] expected = null;
			double[] actual;

			actual = ((double[])(quaternion));
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// GetHashCodeTest is a test case for GetHashCode ()
/// </summary>
		[TestMethod()]
		public void GetHashCodeTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			int expected = 0;
			int actual;

			actual = target.GetHashCode();
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ICloneable_CloneTest is a test case for ICloneable.Clone ()
/// </summary>
		[TestMethod()]
		public void ICloneable_CloneTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			object expected = null;
			object actual;

			actual = ((ICloneable)target).Clone();
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// InverseTest is a test case for Inverse ()
/// </summary>
		[TestMethod()]
		public void InverseTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			target.Inverse();

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// LogTest is a test case for Log (Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void LogTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Log(quaternion);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest is a test case for Multiply (Sharp3D.Math.Core.QuaternionD, double)
/// </summary>
		[TestMethod()]
		public void MultiplyTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			double scalar = 0;

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Multiply(quaternion, scalar);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest1 is a test case for Multiply (Sharp3D.Math.Core.QuaternionD, double, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void MultiplyTest1()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			double scalar = 0;
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD result = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD.Multiply(quaternion, scalar, ref result);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest2 is a test case for Multiply (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void MultiplyTest2()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Multiply(left, right);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest3 is a test case for Multiply (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void MultiplyTest3()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD result = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD.Multiply(left, right, ref result);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// NormalizeTest is a test case for Normalize ()
/// </summary>
		[TestMethod()]
		public void NormalizeTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			target.Normalize();

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// SubtractTest is a test case for operator -
/// </summary>
		[TestMethod()]
		public void SubtractTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = left - right;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// NotEqualTest is a test case for operator !=
/// </summary>
		[TestMethod()]
		public void NotEqualTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			bool expected = false;
			bool actual;

			actual = left != right;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest4 is a test case for operator *
/// </summary>
		[TestMethod()]
		public void MultiplyTest4()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = left * right;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest5 is a test case for operator *
/// </summary>
		[TestMethod()]
		public void MultiplyTest5()
		{
			//  TODO: Initialize to an appropriate value
			double scalar = 0;
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = scalar * quaternion;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// MultiplyTest6 is a test case for operator *
/// </summary>
		[TestMethod()]
		public void MultiplyTest6()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			double scalar = 0;

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = quaternion * scalar;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// DivideTest2 is a test case for operator /
/// </summary>
		[TestMethod()]
		public void DivideTest2()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			double scalar = 0;

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = quaternion / scalar;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// DivideTest3 is a test case for operator /
/// </summary>
		[TestMethod()]
		public void DivideTest3()
		{
			//  TODO: Initialize to an appropriate value
			double scalar = 0;
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = scalar / quaternion;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// AddTest2 is a test case for operator +
/// </summary>
		[TestMethod()]
		public void AddTest2()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = left + right;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ValueEqualityTest is a test case for operator ==
/// </summary>
		[TestMethod()]
		public void ValueEqualityTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			bool expected = false;
			bool actual;

			actual = left == right;
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ParseTest is a test case for Parse (string)
/// </summary>
		[TestMethod()]
		public void ParseTest()
		{
			//  TODO: Initialize to an appropriate value
			string value = null;

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Parse(value);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// SubtractTest1 is a test case for Subtract (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void SubtractTest1()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD expected = new Sharp3D.Math.Core.QuaternionD();
			Sharp3D.Math.Core.QuaternionD actual;

			actual = Sharp3D.Math.Core.QuaternionD.Subtract(left, right);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// SubtractTest2 is a test case for Subtract (Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void SubtractTest2()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD left = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD right = new Sharp3D.Math.Core.QuaternionD();
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD result = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD.Subtract(left, right, ref result);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// ToStringTest is a test case for ToString ()
/// </summary>
		[TestMethod()]
		public void ToStringTest()
		{
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD quaternion = new Sharp3D.Math.Core.QuaternionD();

			Sharp3D.Math.Core.QuaternionD target = new Sharp3D.Math.Core.QuaternionD(quaternion);

			string expected = null;
			string actual;

			actual = target.ToString();
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

/// <summary>
/// TryParseTest is a test case for TryParse (string, Sharp3D.Math.Core.QuaternionD)
/// </summary>
		[TestMethod()]
		public void TryParseTest()
		{
			//  TODO: Initialize to an appropriate value
			string value = null;
			//  TODO: Initialize to an appropriate value
			Sharp3D.Math.Core.QuaternionD result = new Sharp3D.Math.Core.QuaternionD();

			bool expected = false;
			bool actual;

			actual = Sharp3D.Math.Core.QuaternionD.TryParse(value, out result);
			Assert.AreEqual(expected, actual);

			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}
}
